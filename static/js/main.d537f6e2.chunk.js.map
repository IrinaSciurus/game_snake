{"version":3,"sources":["Snake.jsx","Food.jsx","App.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","key","Food","getRandomCoordinates","Math","floor","random","App","useState","setSnakeDot","food","setFood","direction","setDirection","speed","setSpeed","useEffect","intervalId","setInterval","dots","head","length","push","shift","clearInterval","onKeyDown","ev","document","event","keyCode","addEventListener","removeEventListener","gameOver","snake","pop","forEach","largestSnake","increaseSpeed","newSnake","unshift","alert","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d537f6e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Snake(props){\r\n    const {snakeDots} = props;\r\n    return (\r\n        <div>\r\n            {snakeDots.map((dot,i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`\r\n            }\r\n            return (\r\n                <div className=\"snakeDot\" key={i} style={style}></div>\r\n            )\r\n\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default Snake;","import React from \"react\";\r\n\r\nfunction Food(props){\r\n    const {dot} = props;\r\n       const style = {\r\n        left: `${dot[0]}%`,\r\n        top: `${dot[1]}%`\r\n    }\r\n    return(\r\n        <div className=\"snakeFood\" style={style}>\r\n        </div>\r\n    )\r\n}\r\nexport default Food;","import React,{useState, useEffect} from 'react';\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst  getRandomCoordinates = () =>{\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    return [x,y]\n}\nfunction App() {\n  const [snakeDots, setSnakeDot] = useState([[0,0],[2,0]]);\n  const [food, setFood] = useState(getRandomCoordinates());\n  const [direction,setDirection] = useState('RIGHT');\n  const [speed,setSpeed] = useState(200);\n\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n                              let dots = [...snakeDots];\n                              let head = dots[dots.length-1];\n                              switch (direction){\n                                  case 'RIGHT':\n                                      head=[head[0] + 2, head[1]];\n                                      break;\n                                  case 'LEFT':\n                                      head=[head[0] - 2, head[1]];\n                                      break;\n                                  case 'DOWN':\n                                      head=[head[0], head[1] + 2];\n                                      break;\n                                  case 'UP':\n                                      head=[head[0], head[1] - 2];\n                                      break;\n                              }\n                              dots.push(head);\n                              dots.shift();\n                              setSnakeDot(dots);\n                          }, speed);\n\n             return () => clearInterval(intervalId);\n        });\n\n    useEffect(() => {\n        const onKeyDown = (ev) => {\n            ev = ev || document.event;\n            switch (ev.keyCode){\n                case 38:  setDirection('UP');\n                    break;\n                case 40:  setDirection( 'DOWN');\n                    break;\n                case 37:  setDirection( 'LEFT');\n                    break;\n                case 39:  setDirection( 'RIGHT');\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', onKeyDown);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n        }\n    });\n\n     useEffect( () => {\n            let head = snakeDots[snakeDots.length-1];\n            if(head[0]>=100 || head[1]>=100 || head[0] < 0 || head[1] < 0){\n                gameOver();\n            }\n      });\n\n    useEffect( () => {\n         let snake = [...snakeDots];\n         let head = snake[snake.length-1];\n         snake.pop();\n         snake.forEach(dot => {\n             if (head[0] == dot[0] && head [1] == dot[1]) {\n                 gameOver();\n             }\n         });\n     });\n\n    useEffect( () => {\n        let head = snakeDots[snakeDots.length-1];\n        // let food = food;\n        if(head[0] == food[0] && head[1] == food[1]){\n            setFood(getRandomCoordinates());\n            largestSnake();\n            increaseSpeed();\n        }\n    });\n\n    const largestSnake = () => {\n        let newSnake = [...snakeDots];\n        newSnake.unshift([])\n        setSnakeDot(newSnake);\n    }\n\n    const increaseSpeed = () => {\n        if(speed > 10){\n            setSpeed(speed-10);\n        }\n    }\n\n     const gameOver = () =>{\n         alert(`Game Over! Snake length is ${snakeDots.length}`);\n         setSnakeDot([[0,0],[2,0]]);\n         setFood(getRandomCoordinates());\n         setDirection('RIGHT');\n         setSpeed(200);\n     }\n\n\n  return (\n    <div className=\"gameArea\">\n        <Snake snakeDots={snakeDots}/>\n        <Food dot={food}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}